<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonPressed" xml:space="preserve">
    <value>Button was pressed</value>
  </data>
  <data name="ChangeHeight" xml:space="preserve">
    <value>Height changed</value>
  </data>
  <data name="ChangeWidth" xml:space="preserve">
    <value>Width changed</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="CurrentDebugLevel" xml:space="preserve">
    <value>Current debug level is set to</value>
  </data>
  <data name="DebugAlarm" xml:space="preserve">
    <value>ALARM</value>
  </data>
  <data name="DebugCritical" xml:space="preserve">
    <value>CRIT</value>
  </data>
  <data name="DebugLevel" xml:space="preserve">
    <value>Debug level</value>
  </data>
  <data name="DebugWarning" xml:space="preserve">
    <value>WARN</value>
  </data>
  <data name="EarlyReleaseWarning" xml:space="preserve">
    <value>Software is in early release, use with caution</value>
  </data>
  <data name="FileSellectCanceled" xml:space="preserve">
    <value>File sellection canceled</value>
  </data>
  <data name="FunctionFinished" xml:space="preserve">
    <value>Function finished</value>
  </data>
  <data name="GetDataFromGrid" xml:space="preserve">
    <value>Getting data to grid</value>
  </data>
  <data name="LoadDataFromFile" xml:space="preserve">
    <value>Loading data from file</value>
  </data>
  <data name="NoDataGrid" xml:space="preserve">
    <value>There is no valid data in grid</value>
  </data>
  <data name="NoFunction" xml:space="preserve">
    <value>Function does not exist</value>
  </data>
  <data name="ParameterNotFound" xml:space="preserve">
    <value>Parameter not found when parsing</value>
  </data>
  <data name="DesignImport" xml:space="preserve">
    <value>Importing design file</value>
  </data>
  <data name="ProgressBarOutRange" xml:space="preserve">
    <value>Progress bar value is out of range</value>
  </data>
  <data name="PutDataToGrid" xml:space="preserve">
    <value>Putting data to grid</value>
  </data>
  <data name="Row" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="SaveDataToFile" xml:space="preserve">
    <value>Saving data to file</value>
  </data>
  <data name="SoftwareStart" xml:space="preserve">
    <value>Software is started, version is</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Canceled" xml:space="preserve">
    <value>Canceled</value>
  </data>
  <data name="ColumnAddDropDown" xml:space="preserve">
    <value>Column add drop down</value>
  </data>
  <data name="ConfirmExit" xml:space="preserve">
    <value>Do you want to save before exit?</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="DataReadFailBounds" xml:space="preserve">
    <value>Extract data from excel file error, requested column is out of bound</value>
  </data>
  <data name="DataReadFailFormat" xml:space="preserve">
    <value>Extract data from excel file error, this format of cell is not implemented</value>
  </data>
  <data name="ExtractDataFromDesign" xml:space="preserve">
    <value>Extract data from design signals</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="Hidden" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="KKSCombine" xml:space="preserve">
    <value>KKS from 4 parts are combined</value>
  </data>
  <data name="NoFile" xml:space="preserve">
    <value>File does not exist</value>
  </data>
  <data name="NoPasteData" xml:space="preserve">
    <value>No data to paste</value>
  </data>
  <data name="ObjectGenerateUniqueData" xml:space="preserve">
    <value>Searching unique KKS signals in Data_</value>
  </data>
  <data name="ObjectTransferToData" xml:space="preserve">
    <value>Transfer object data to data signals </value>
  </data>
  <data name="PasteAt" xml:space="preserve">
    <value>Paste at</value>
  </data>
  <data name="PasteData" xml:space="preserve">
    <value>Paste data</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="ToMuchDataPaste" xml:space="preserve">
    <value>To much data to paste</value>
  </data>
  <data name="ChannelHasNumber" xml:space="preserve">
    <value>Channel column has number</value>
  </data>
  <data name="ChannelIsNumber" xml:space="preserve">
    <value>Channel column is fully number</value>
  </data>
  <data name="PinHasNumber" xml:space="preserve">
    <value>Pin column has number</value>
  </data>
  <data name="PinIsNumber" xml:space="preserve">
    <value>Pin column is fully number</value>
  </data>
  <data name="RowOffset" xml:space="preserve">
    <value>Row offset</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="FileAutoLoad" xml:space="preserve">
    <value>Automatic save file loading</value>
  </data>
  <data name="FindFunction" xml:space="preserve">
    <value>Finding funtion type in data</value>
  </data>
  <data name="FindObjectType" xml:space="preserve">
    <value>Finding object type in object</value>
  </data>
  <data name="DBNotFound" xml:space="preserve">
    <value>Database not found</value>
  </data>
  <data name="Variables" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="False" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="Multiplier" xml:space="preserve">
    <value>Multiplier</value>
  </data>
  <data name="Offset" xml:space="preserve">
    <value>Offset</value>
  </data>
  <data name="Statement" xml:space="preserve">
    <value>Statement</value>
  </data>
  <data name="True" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="MemoryArea" xml:space="preserve">
    <value>Memory area</value>
  </data>
  <data name="CreateNew" xml:space="preserve">
    <value>Create new</value>
  </data>
  <data name="ModuleGenerateUniqueData" xml:space="preserve">
    <value>Searching unique Modules signals in Data_</value>
  </data>
  <data name="CPU" xml:space="preserve">
    <value>CPU</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="SCADA" xml:space="preserve">
    <value>SCADA</value>
  </data>
  <data name="DeleteMe" xml:space="preserve">
    <value>Delete Me</value>
  </data>
  <data name="ConvertListToData" xml:space="preserve">
    <value>Convert list to data</value>
  </data>
  <data name="AddBefore" xml:space="preserve">
    <value>Add before</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="CopyToEnd" xml:space="preserve">
    <value>Copy to end</value>
  </data>
  <data name="CopyEnd" xml:space="preserve">
    <value>Copy to end</value>
  </data>
  <data name="ConvertDataToList" xml:space="preserve">
    <value>Convert data to list</value>
  </data>
  <data name="EnteredEmptyName" xml:space="preserve">
    <value>Entered name is empty</value>
  </data>
  <data name="EnteredExistingName" xml:space="preserve">
    <value>Entered name that already exists</value>
  </data>
  <data name="CheckOverlap" xml:space="preserve">
    <value>Checking overlaping memory address</value>
  </data>
  <data name="Separator" xml:space="preserve">
    <value>Separator</value>
  </data>
  <data name="Declare" xml:space="preserve">
    <value>Declare</value>
  </data>
  <data name="Instance" xml:space="preserve">
    <value>Instance</value>
  </data>
  <data name="MemoryOverlap" xml:space="preserve">
    <value>There is memory overlap, review offsets, sizes, areas</value>
  </data>
</root>